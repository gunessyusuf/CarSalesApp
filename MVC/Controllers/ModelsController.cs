#nullable disable
using AppCore.Results.Bases;
using Business.Models;
using Business.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;

//Generated by ScaffoldApp.
namespace MVC.Controllers
{
    [Authorize(Roles = "Admin")]
    public class ModelsController : Controller
    {
        // Add service injections here
        private readonly IModelService _modelService;
        private readonly IBrandService _brandService;

        public ModelsController(IModelService modelService, IBrandService brandService)
        {
            _modelService = modelService;
            _brandService = brandService;
        }

        [AllowAnonymous]
        // GET: Models
        public IActionResult Index()
        {
            List<ModelModel> modelList = _modelService.Query().ToList();
            return View(modelList);
        }

        [AllowAnonymous]
        // GET: Models/Details/5
        public IActionResult Details(int id)
        {
            ModelModel model = _modelService.Query().SingleOrDefault(m => m.Id == id);
            if (model == null)
            {
                return View("_Error", "Model not found!");
            }
            return View(model);
        }

        // GET: Models/Create
        public IActionResult Create()
        {
           var brands = _brandService.Query().ToList();
            ViewData["BrandId"] = new SelectList(_brandService.Query().ToList(), "Id", "Name");
            return View();
        }

        // POST: Models/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(ModelModel model)
        {
            if (ModelState.IsValid)
            {
                var result = _modelService.Add(model);
                if (result.IsSuccessful)
                {
                    TempData["Message"] = result.Message;
                    return RedirectToAction(nameof(Index));
                }

				ModelState.AddModelError("", result.Message);

			}

			
			// Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
			ViewData["BrandId"] = new SelectList(_brandService.Query().ToList(), "Id", "Name", model.BrandId);
            return View(model);
        }

        // GET: Models/Edit/5
        public IActionResult Edit(int id)
        {
            ModelModel model = _modelService.Query().SingleOrDefault(m =>m.Id == id);
            if (model == null)
            {
                return View("_Error", "Model not found!");
            }
            
            ViewData["BrandId"] = new SelectList(_brandService.Query().ToList(), "Id", "Name", model.BrandId);
            return View(model);
        }

        // POST: Models/Edit
        
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(ModelModel model)
        {
            if (ModelState.IsValid)
            {
                var result = _modelService.Update(model);
				if (result.IsSuccessful)
				{
					TempData["Message"] = result.Message;
					return RedirectToAction(nameof(Index));
				}
				ModelState.AddModelError("", result.Message);
			}
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            ViewData["BrandId"] = new SelectList(_brandService.Query().ToList(), "Id", "Name", model.BrandId);
            return View(model);
        }

        // GET: Models/Delete/5
        public IActionResult Delete(int id)
        {
            ModelModel model = _modelService.Query().SingleOrDefault(m => m.Id == id);
            if (model == null)
            {
                return View("_Error", "Model not found!");
            }
            return View(model);
        }

        // POST: Models/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id)
        {
            var result = _modelService.Delete(id);
                      
            return RedirectToAction(nameof(Index));
            
            
        }
	}
}

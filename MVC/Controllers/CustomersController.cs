#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using DataAccess.Contexts;
using DataAccess.Entities;
using Business.Services;
using Business.Models;

//Generated by ScaffoldApp.
namespace MVC.Controllers
{
    public class CustomersController : Controller
    {
        // Add service injections here
        private readonly ICustomerService _customerService;        
        private readonly ICountryService _countryService;
        private readonly ICityService _cityService;
        public CustomersController(ICustomerService customerService, IAccountService accountService, ICountryService countryService, ICityService cityService)
        {
            _customerService = customerService;            
            _countryService = countryService;
            _cityService = cityService;
        }

        // GET: Customers
        public IActionResult Index()
        {
            List<CustomerModel> customerList = _customerService.Query().ToList();
            return View(customerList);
        }

        // GET: Customers/Details/5
        public IActionResult Details(int id)
        {
            CustomerModel customer = _customerService.Query().SingleOrDefault(c => c.Id == id);
            if (customer == null)
            {
                return View("_Error", "Customer not found!");
            }
            return View(customer);
        }

        // GET: Customers/Create
        public IActionResult Create()
        {
            ViewBag.Countries = new SelectList(_countryService.GetList(), "Id", "Name");
            return View();
        }

        // POST: Customers/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(CustomerModel customer)
        {
            if (ModelState.IsValid)
            {
                var result = _customerService.Add(customer);
				if (result.IsSuccessful)
				{
					TempData["Message"] = result.Message;
					return RedirectToAction(nameof(Index));
				}
				ModelState.AddModelError("", result.Message);


			}
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            ViewBag.Countries = new SelectList(_countryService.GetList(), "Id", "Name", customer.CustomerDetail.CountryId);


            ViewBag.Cities = new SelectList(_cityService.GetList(customer.CustomerDetail.CountryId), "Id", "Name", customer.CustomerDetail.CityId);
            return View(customer);
        }

        // GET: Customers/Edit/5
        public IActionResult Edit(int id)
        {
            CustomerModel customer = _customerService.Query().SingleOrDefault(c  => c.Id == id);
            if (customer == null)
            {
                return View("_Error", "Customer not found!");
            }
            // Add get related items service logic here to set ViewData if necessary and update null parameter in SelectList with these items
            ViewBag.Countries = new SelectList(_countryService.GetList(), "Id", "Name");
            return View(customer);
        }

        // POST: Customers/Edit
       
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(CustomerModel customer)
        {
            if (ModelState.IsValid)
            {
                var result = _customerService.Update(customer);
				if (result.IsSuccessful)
				{
					TempData["Message"] = result.Message;
					return RedirectToAction(nameof(Index));
				}
				ModelState.AddModelError("", result.Message);

			}
            
            ViewBag.Countries = new SelectList(_countryService.GetList(), "Id", "Name", customer.CustomerDetail.CountryId);


            ViewBag.Cities = new SelectList(_cityService.GetList(customer.CustomerDetail.CountryId), "Id", "Name", customer.CustomerDetail.CityId);
            return View(customer);
        }

        // GET: Customers/Delete/5
        public IActionResult Delete(int id)
        {
            CustomerModel customer = _customerService.Query().SingleOrDefault(c => c.Id ==id);
            if (customer == null)
            {
                return View("_Error", "Customer not found!");
            }
            return View(customer);
        }

        // POST: Customers/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(int id)
        {
            var result = _customerService.Delete(id);
            return RedirectToAction(nameof(Index), new { message = result.Message });
        }
	}
}

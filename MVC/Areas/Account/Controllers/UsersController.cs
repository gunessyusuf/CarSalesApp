#nullable disable
using AppCore.Results.Bases;
using Business.Models;
using Business.Models.Account;
using Business.Services;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Security.Claims;

//Generated by ScaffoldApp.
namespace MVC.Areas.Account.Controllers
{
    [Area("Account")]
    public class UsersController : Controller
    {
        // Add service injections here
        private readonly IAccountService _accountService;
        private readonly ICountryService _countryService;
        private readonly ICityService _cityService;

        public UsersController(IAccountService accountService, ICountryService countryService, ICityService cityService)
        {
            _accountService = accountService;
            _countryService = countryService;
            _cityService = cityService;
        }


        // GET: Account/Users/Login
        public IActionResult Login(string returnUrl)
        {
           AccountLoginModel model = new AccountLoginModel()
           {
               ReturnUrl = returnUrl,
           };
            return View(model);
        }

        // POST: Account/Users/Login
        
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Login(AccountLoginModel model) // giriş
        {
            if (ModelState.IsValid)
            {
                var userResultModel = new UserModel();
                var result = _accountService.Login(model, userResultModel);

                if (result.IsSuccessful)
                {
                    List<Claim> claims = new List<Claim>()
                    {
                        new Claim(ClaimTypes.Name , userResultModel.UserName),
                        new Claim(ClaimTypes.Role , userResultModel.Role.Name),
                    };

                    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

                    var principal = new ClaimsPrincipal(identity);

                    HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal).Wait();

                    if (!string.IsNullOrWhiteSpace(model.ReturnUrl))
                        return Redirect(model.ReturnUrl);

                    return RedirectToAction("Index", "Home", new { area = "" });
                }

                ModelState.AddModelError("", result.Message);
            }
            
            return View();
        } 
        
        public IActionResult Logout() // çıkış
        {
            HttpContext.SignOutAsync();
            return RedirectToAction("Index", "Home", new { area = "" });
        }

        public IActionResult AccessDenied()
        {
            return View("_Error", "Access is denied for this page!");
        }

		public IActionResult Register()
		{
            ViewBag.Countries = new SelectList(_countryService.GetList(), "Id", "Name");
            return View();
		}

		[HttpPost]
		[ValidateAntiForgeryToken]
		public IActionResult Register(AccountRegisterModel model)
		{
			if (ModelState.IsValid)
			{
				Result result = _accountService.Register(model);
				if (result.IsSuccessful)
                    return RedirectToAction(nameof(Login));

                ModelState.AddModelError("", result.Message);
			}
            ViewBag.Countries = new SelectList(_countryService.GetList(), "Id", "Name", model.UserDetail.CountryId);
            

            ViewBag.Cities = new SelectList(_cityService.GetList(model.UserDetail.CountryId ?? 0), "Id", "Name", model.UserDetail.CityId);
            return View(model);
		}

	}
}
